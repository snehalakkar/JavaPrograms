package com.bridgelabz.controller;

import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;

import com.bridgelabz.model.Person;
import com.bridgelabz.service.AddressBook;

/**Address Book Controller implementation class
 * @author bridgeit
 *
 * @param <linkedList>
 */
public class AddressBookController<linkedList> implements AddressBook {
	Scanner scanner = new Scanner(System.in);
	Person person = new Person();
	LinkedList<Person> linkedList = new LinkedList<Person>();
	HashMap<String, LinkedList> hashMap = new HashMap<String, LinkedList>();
	String addressBookName;

	public void createAddressBook() {
		System.out.println("\nCreate address book ");
		System.out.println("\n give name to address book ");
		String addressBookName = scanner.next();
		System.out.println("Addres book name is :" + addressBookName);
		if (hashMap.containsKey(addressBookName)) {
			System.out.println("\n address book is already exist with same name ,do u want to create another?(yes/no)");
			String ans = scanner.next();
			if (ans.equalsIgnoreCase("yes")) {
				createAddressBook();
			}
		} else {
			hashMap.put(addressBookName, new LinkedList<Person>());
		}
	}

	public void addPerson(String addressBookName1) {
		if (hashMap.containsKey(addressBookName1)) {
			person = new Person();
			// linkedList = new LinkedList<Person>();
			System.out.println("\nEnter first name :");
			String firstName = scanner.next();
			person.setFirstName(firstName);
			System.out.println("\nEnter last name :");
			String lastName = scanner.next();
			person.setLastName(lastName);
			System.out.println("\nEnter address :");
			String address = scanner.next();
			person.setAddress(address);
			System.out.println("\nEnter state name :");
			String state = scanner.next();
			person.setState(state);
			System.out.println("\nEnter zip code :");
			int zip = scanner.nextInt();
			person.setZip(zip);
			System.out.println("\nEnter 10 digit phone number :");
			long phone = scanner.nextLong();
            int length=Long.toString(phone).length();
            if(length==10){
			person.setPhone(phone);
            }
            else{
            	System.out.println("Invalid length of phone number ");
            }
			person.display();

			if (hashMap.get(addressBookName1) == null) {
				hashMap.put(addressBookName1, new LinkedList<Person>());
			}
			hashMap.get(addressBookName1).add(person);

			System.out.println("\n" + hashMap);
		} else {
			System.out.println("\n Address book is not in record,u first create address book ");
			createAddressBook();
		}
	}

	@Override
	public void deletePerson() {
		System.out.println("\n Enter the name of address book which you want to delete ....");
		String deletename = scanner.next();
		System.out.println("\n Enter the firstname of user which record you want to delete ");
		String first = scanner.next();
		@SuppressWarnings("unchecked")
		LinkedList<Person> linkedList = hashMap.get(deletename);

		if (linkedList != null) {
			for (int i = 0; i < linkedList.size(); i++) {
				Person p1 = linkedList.get(i);
				if (p1.getFirstName().equalsIgnoreCase(first)) {
					linkedList.remove(i);
					System.out.println("Delete Successfulll.......  .");
					System.out.println("\n" + linkedList);
				}
			}

			System.out.println(linkedList.remove(deletename));
		} else {
			System.out.println("no data available");
		}
		for (Person per : linkedList) {
			System.out.println(per);
		}
		System.out.println("\n" + hashMap);
	}

	@Override
	public void updatePerson() {
		System.out.println("\n Enter the name of address book which you want to update ....");
		String updatename = scanner.next();
		System.out.println("\nEnter first name :");
		String first = scanner.next();
		boolean flag = hashMap.containsKey(updatename);
		if (flag) {
			LinkedList<Person> linkedList = hashMap.get(updatename);
			for (int i = 0; i < linkedList.size(); i++) {
				Person p1 = linkedList.get(i);
				if (p1.getFirstName().equalsIgnoreCase(first)) {
					System.out.println("\nU can update now   ");
					System.out.println("\nEnter first name :");
					String firstName = scanner.next();
					person.setFirstName(firstName);
					System.out.println("\nEnter last name :");
					String lastName = scanner.next();
					person.setLastName(lastName);
					System.out.println("\nEnter address :");
					String address = scanner.next();
					person.setAddress(address);
					System.out.println("\nEnter state name :");
					String state = scanner.next();
					person.setState(state);
					System.out.println("\nEnter zip code :");
					int zip = scanner.nextInt();
					person.setZip(zip);
					System.out.println("\nEnter phone number :");
					long phone = scanner.nextLong();
					person.setPhone(phone);
					System.out.println("\nUpdate successfull ....");
					person.display();

				}
				System.out.println(linkedList);
				person.display();
				for (Person per : linkedList) {
					System.out.println(per);
				}
			}
		}

		System.out.println("\n" + hashMap);
	}

	@Override
	public void sortByName() {
		System.out.println("\n Sort by name ");
		System.out.println("\n Enter the address book which you want to sort ");
		String name = scanner.next();
		if (hashMap.containsKey(name)) {
			LinkedList<Person> linkedList = hashMap.get(name);
			Collections.sort(linkedList, Person.personName);
			for (Person per : linkedList) {
				System.out.println(per);
			}
		}
	}

	@Override
	public void sortByZip() {
		System.out.println("\n Sort by zip ");
		System.out.println("\n Enter the address book which you want to sort ");
		String name = scanner.next();
		if (hashMap.containsKey(name)) {
			LinkedList<Person> linkedList = hashMap.get(name);
			Collections.sort(linkedList, Person.zipcode);
			for (Person per : linkedList) {
				System.out.println(per);
			}
		}
	}

	@Override
	public void searchPerson() {
		System.out.println("\n Enter the phone number of person whose record you want to search  ");
		long searchnumber = scanner.nextLong();
		Set<String> keys = hashMap.keySet();
		boolean flag = false;
		for (String key : keys) {
			System.out.println(key);
			LinkedList<Person> linkedList = hashMap.get(key);
			System.out.println(linkedList);
			if (linkedList != null) {
				for (int i = 0; i < linkedList.size(); i++) {
					Person p1 = linkedList.get(i);
					if (p1.getPhone() == searchnumber) {
						System.out.println("\n person found ");
						p1.display();
						flag = true;
					}
				}
			}

		}
		if (!flag) {
			System.out.println("u entered invalid phone number ");
		}

	}

}
